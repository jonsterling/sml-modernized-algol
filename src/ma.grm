structure OD = OperatorData
open Ast

infix $ \

val mkRet  = fn e => OD.RET $ [([], []) \ e]
val mkBind = fn (x, exp, cmd) => OD.BND $ [([], []) \ exp, ([], [x]) \ cmd]
val mkDecl = fn (a, exp, cmd) => OD.DCL $ [([], []) \ exp, ([a], []) \ cmd]
val mkGet  = fn (a : string) => (OD.GET a) $ []
val mkSet  = fn (a : string, exp) => (OD.SET a) $ [([], []) \ exp]
val mkNum  = fn x => (OD.NUM x) $ []
val mkCmd  = fn cmd => OD.CMD $ [([], []) \ cmd]

%%
%header (functor MALrValsFun (structure Token : TOKEN))

%term EOF
   | IDENT of string
   | NUM of Int.int
   | BIND
   | CMD
   | RET
   | SCOLON
   | GETS
   | DECL
   | IN
   | LARROW
   | AT
   | DO
   | LCURLY
   | RCURLY

%nonterm start of ast | exp of ast | cmd of ast

%verbose
%pos (string -> Coord.t)
%start start
%eop EOF
%noshift EOF
%name MA
%arg (fileName) : string
%%

start : exp                                                               (exp)

exp   : IDENT                                                         (` IDENT)
      | NUM                                                         (mkNum NUM)
      | CMD cmd                                                     (mkCmd cmd)

cmd   : RET exp                                                     (mkRet exp)
      | BIND IDENT LARROW exp SCOLON cmd             (mkBind (IDENT, exp, cmd))
      | DECL IDENT GETS   exp IN     cmd             (mkDecl (IDENT, exp, cmd))
      | AT IDENT                                                  (mkGet IDENT)
      | IDENT GETS exp                                     (mkSet (IDENT, exp))
      | DO exp                               (mkBind ("x", exp, mkRet (` "x")))
      | LCURLY IDENT LARROW cmd SCOLON cmd RCURLY
                                             (mkBind (IDENT, mkCmd cmd1, cmd2))
